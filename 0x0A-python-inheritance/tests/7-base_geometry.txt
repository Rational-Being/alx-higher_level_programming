>>> bg =__import__("7-base_geometry").BaseGeometry
>>> 
>>> def tst(items=[]):
...    for item in items:
...        try:
...        bg.integer_validator("name", tst)
...        except Exception as e:
...            print([{}] {} for type{}".format(e.__class__.__name__, e, type(tst)))

>>> items = [True, "john", 5.67. -98.908, rat(), [9, 0], (22, 44), {"life": 43), bg, BaseGeometry, None]
>>> tst(items)
>>> [TypeError] name must be an integer for type <class 'bool'>
>>> [TypeError] name must be an integer for type <class 'string'>
>>> [TypeError] name must be an integer for type <class 'float'>
>>> [TypeError] name must be an integer for type <class 'float'>
>>> [TypeError] name must be an integer for type <class 'set'>
>>> [TypeError] name must be an integer for type <class 'list'>
>>> [TypeError] name must be an integer for type <class 'tuple'>
>>> [TypeError] name must be an integer for type <class 'dict'>
>>> [TypeError] name must be an integer for type <class '7-base_geometry.BaseGeometry'>
>>> [TypeError] name must be an integer for type <class 'type'>
>>> [TypeError] name must be an integer for type <class 'NoneType'>
>>> 
>>> c = __import__("7-base_geometry").BaseGeometry.__doc__
>>> len(c) > 1
>>> True

>>> m = __import__("7-base_geometry").__doc__
>>> len(m) > 1
>>> True

>>> bg = BaseGeometry()
>>> bg.integer_validator("int", 78.9)
>>> Traceback (most recent call last):
...
>>> TypeError: int must be an integer

>>> bg = BaseGeometry()
>>> bg.integer_validator("int", "inte")
>>> Traceback (most recent call last):
...
>>> TypeError: int must be an integer

>>> bg = BaseGeometry()
>>> bg.integer_validator("int", "inte")
>>> Traceback (most recent call last):
...
>>> ValueError: int must be greater than 0



>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
